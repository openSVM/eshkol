;;
;; List Operations Example
;;
;; This example demonstrates the use of the core list operations
;; (cons, car, cdr) and related functions.
;;

;; Create a pair
(define pair (cons 1 2))
(display "Pair: ") (display pair) (newline)

;; Access the elements of a pair
(display "car: ") (display (car pair)) (newline)
(display "cdr: ") (display (cdr pair)) (newline)

;; Create a list
(define my-list (list 1 2 3 4 5))
(display "List: ") (display my-list) (newline)

;; Access elements of a list
(display "First element: ") (display (car my-list)) (newline)
(display "Rest of the list: ") (display (cdr my-list)) (newline)
(display "Second element: ") (display (car (cdr my-list))) (newline)
(display "Third element: ") (display (car (cdr (cdr my-list)))) (newline)

;; Using cadr, caddr, etc.
(display "Second element (cadr): ") (display (cadr my-list)) (newline)
(display "Third element (caddr): ") (display (caddr my-list)) (newline)

;; Modify a pair
(set-car! pair 10)
(set-cdr! pair 20)
(display "Modified pair: ") (display pair) (newline)

;; Check if something is a pair
(display "Is my-list a pair? ") (display (pair? my-list)) (newline)
(display "Is pair a pair? ") (display (pair? pair)) (newline)
(display "Is 42 a pair? ") (display (pair? 42)) (newline)

;; Check if something is a list
(display "Is my-list a list? ") (display (list? my-list)) (newline)
(display "Is pair a list? ") (display (list? pair)) (newline)
(display "Is '() a list? ") (display (list? '())) (newline)

;; Check if something is the empty list
(display "Is my-list null? ") (display (null? my-list)) (newline)
(display "Is '() null? ") (display (null? '())) (newline)

;; Get the length of a list
(display "Length of my-list: ") (display (length my-list)) (newline)
(display "Length of '(): ") (display (length '())) (newline)

;; Create a nested list structure
(define nested (list (list 1 2) (list 3 4)))
(display "Nested list: ") (display nested) (newline)
(display "First element of first element: ") (display (caar nested)) (newline)
(display "Second element of first element: ") (display (cadar nested)) (newline)
(display "First element of second element: ") (display (caadr nested)) (newline)
(display "Second element of second element: ") (display (cadadr nested)) (newline)

;; Build a list using cons
(define built-list (cons 1 (cons 2 (cons 3 '()))))
(display "Built list: ") (display built-list) (newline)

;; Append two lists
(define list1 (list 1 2 3))
(define list2 (list 4 5 6))
(define appended (append list1 list2))
(display "Appended list: ") (display appended) (newline)

;; Reverse a list
(define reversed (reverse list1))
(display "Reversed list: ") (display reversed) (newline)

;; Map a function over a list
(define squared (map (lambda (x) (* x x)) list1))
(display "Squared list: ") (display squared) (newline)

;; Filter a list
(define evens (filter (lambda (x) (= 0 (remainder x 2))) appended))
(display "Even numbers: ") (display evens) (newline)

;; Fold a list
(define sum (fold + 0 list1))
(display "Sum of list1: ") (display sum) (newline)

;; End of example
