;;
;; Untyped Example in Eshkol
;; This example demonstrates code without any type annotations
;; Types are inferred by the compiler
;;

;; Simple function without type annotations
(define (add x y)
  (+ x y))

;; Function that works with different types due to type inference
(define (process-data value)
  (if (< value 10)
      (* value 2)      ; Works with numbers
      (string-append "Value: " (number->string value))))  ; Works with strings

;; Function with complex return values
(define (create-point x y)
  (vector x y))  ; Creates a 2D point as a vector

;; Main function to demonstrate the examples
(define (main)
  ;; Basic arithmetic with inferred types
  (define result1 (add 5 10))
  (display "5 + 10 = ")
  (display result1)
  (newline)
  
  ;; Processing different data types
  (define result2 (process-data 5))
  (define result3 (process-data 15))
  (display "process-data(5) = ")
  (display result2)
  (newline)
  (display "process-data(15) = ")
  (display result3)
  (newline)
  
  ;; Working with vectors
  (define point (create-point 3.5 7.2))
  (display "Point: (")
  (display (vector-ref point 0))
  (display ", ")
  (display (vector-ref point 1))
  (display ")")
  (newline)
  0)  ; Return success code
