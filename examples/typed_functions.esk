;; Typed Functions in Eshkol
;; This example demonstrates the use of type annotations

;; Function with type annotations
(define (add [a : int] [b : int]) : int
  (+ a b))

;; Function with float type annotations
(define (average [a : float64] [b : float64]) : float64
  (/ (+ a b) 2.0))

;; Function with vector type annotations
(define (dot-product [v1 : (Vector float64)] [v2 : (Vector float64)]) : float64
  (let ([sum 0.0]
        [len (min (vector-length v1) (vector-length v2))])
    (for ([i 0] [< i len] [set! i (+ i 1)])
      (set! sum (+ sum (* (vector-ref v1 i) (vector-ref v2 i)))))
    sum))

;; Main function
(define (main) : int
  ;; Integer operations
  (printf "Integer addition: 2 + 3 = %d\n" (add 2 3))
  
  ;; Float operations
  (printf "Float average: 2.5 + 3.5 = %.1f\n" (average 2.5 3.5))
  
  ;; Vector operations
  (let ([v1 (vector 1.0 2.0 3.0)]
        [v2 (vector 4.0 5.0 6.0)])
    (printf "Dot product: [1.0, 2.0, 3.0] Â· [4.0, 5.0, 6.0] = %.1f\n" 
            (dot-product v1 v2)))
  
  0)  ; Return 0 to indicate success
