; Function composition example for Eshkol
; This example demonstrates how to compose functions in Eshkol

; Define some simple functions
(define (square x) (* x x))
(define (add1 x) (+ x 1))
(define (double x) (* x 2))
(define (negate x) (- 0 x))

; Test the functions
(display "Testing simple functions:\n")
(display "square(5) = ") (display (square 5)) (newline)
(display "add1(5) = ") (display (add1 5)) (newline)
(display "double(5) = ") (display (double 5)) (newline)
(display "negate(5) = ") (display (negate 5)) (newline)

; Test direct function application (manual composition)
(display "\nTesting direct function application:\n")
(display "add1(square(5)) = ") (display (add1 (square 5))) (newline)
(display "square(add1(5)) = ") (display (square (add1 5))) (newline)
(display "double(negate(5)) = ") (display (double (negate 5))) (newline)

; Define a compose function that takes two functions and returns a new function
; that applies the first function to the result of applying the second function to its argument
(define (compose f g)
  (lambda (x) (f (g x))))

; Test the compose function
(display "\nTesting compose function:\n")
(define square-then-add1 (compose add1 square))
(display "square-then-add1(5) = ") (display (square-then-add1 5)) (newline)

(define add1-then-square (compose square add1))
(display "add1-then-square(5) = ") (display (add1-then-square 5)) (newline)

(define double-then-negate (compose negate double))
(display "double-then-negate(5) = ") (display (double-then-negate 5)) (newline)

; Define a compose-n function that takes a list of functions and returns a new function
; that applies each function in sequence, from right to left
(define (compose-n . funcs)
  (lambda (x)
    (let loop ((result x) (fs (reverse funcs)))
      (if (null? fs)
          result
          (loop ((car fs) result) (cdr fs))))))

; Test the compose-n function
(display "\nTesting compose-n function:\n")
(define square-add1-double (compose-n double add1 square))
(display "square-add1-double(5) = ") (display (square-add1-double 5)) (newline)

(define negate-double-add1 (compose-n add1 double negate))
(display "negate-double-add1(5) = ") (display (negate-double-add1 5)) (newline)
