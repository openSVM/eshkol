;;; Equality Predicates Example
;;; This file demonstrates the use of equality predicates in Eshkol.

;; Define a function to test equality using different predicates
(define (test-equality a b)
  (display "Testing equality of: ")
  (display a)
  (display " and ")
  (display b)
  (newline)
  
  (display "eq?: ")
  (display (eq? a b))
  (newline)
  
  (display "eqv?: ")
  (display (eqv? a b))
  (newline)
  
  (display "equal?: ")
  (display (equal? a b))
  (newline)
  
  (newline))

;; Test with different types of values

;; Booleans
(display "=== Booleans ===\n")
(test-equality #t #t)
(test-equality #t #f)

;; Numbers
(display "=== Numbers ===\n")
(test-equality 42 42)
(test-equality 42 43)
(test-equality 3.14 3.14)
(test-equality 3.14 3.14159)

;; Symbols
(display "=== Symbols ===\n")
(test-equality 'symbol 'symbol)
(test-equality 'symbol 'different)

;; Strings
(display "=== Strings ===\n")
(test-equality "hello" "hello")
(test-equality "hello" "world")

;; Lists
(display "=== Lists ===\n")
(test-equality '(1 2 3) '(1 2 3))
(test-equality '(1 2 3) '(1 2 4))
(test-equality '(1 (2 3)) '(1 (2 3)))

;; Vectors
(display "=== Vectors ===\n")
(test-equality #(1 2 3) #(1 2 3))
(test-equality #(1 2 3) #(1 2 4))

;; Different objects with the same value
(display "=== Different objects with the same value ===\n")
(define list1 '(1 2 3))
(define list2 '(1 2 3))
(test-equality list1 list2)

(define str1 "hello")
(define str2 "hello")
(test-equality str1 str2)

;; Same object (identity)
(display "=== Same object (identity) ===\n")
(define obj '(1 2 3))
(test-equality obj obj)

;; Procedures
(display "=== Procedures ===\n")
(define (func1 x) (+ x 1))
(define (func2 x) (+ x 1))
(define func3 func1)
(test-equality func1 func2)
(test-equality func1 func3)

;; Define a function that uses eq? for efficiency
(define (fast-assq key alist)
  (cond
    ((null? alist) #f)
    ((eq? key (caar alist)) (car alist))
    (else (fast-assq key (cdr alist)))))

;; Define a function that uses equal? for deep comparison
(define (deep-assoc key alist)
  (cond
    ((null? alist) #f)
    ((equal? key (caar alist)) (car alist))
    (else (deep-assoc key (cdr alist)))))

;; Test the association functions
(display "=== Testing association functions ===\n")
(define symbol-alist '((a . 1) (b . 2) (c . 3)))
(define list-alist '(((1 2) . "list1") ((3 4) . "list2") ((5 6) . "list3")))

(display "fast-assq with symbol key: ")
(display (fast-assq 'b symbol-alist))
(newline)

(display "deep-assoc with list key: ")
(display (deep-assoc '(3 4) list-alist))
(newline)

;; Define a function to demonstrate when to use each equality predicate
(define (explain-equality-usage)
  (display "\n=== When to use each equality predicate ===\n")
  
  (display "eq?: Use for comparing symbols and exact object identity\n")
  (display "  - Fastest comparison\n")
  (display "  - Guaranteed to work for symbols\n")
  (display "  - May not work as expected for numbers and strings\n")
  (display "  - Example: (eq? 'symbol 'symbol) => #t\n")
  
  (display "\neqv?: Use for comparing basic values (numbers, characters, etc.)\n")
  (display "  - Works for symbols, exact numbers, characters\n")
  (display "  - May not work for strings, lists, vectors\n")
  (display "  - Example: (eqv? 42 42) => #t\n")
  
  (display "\nequal?: Use for comparing complex data structures\n")
  (display "  - Works for all types, including lists, vectors, strings\n")
  (display "  - Performs deep comparison of nested structures\n")
  (display "  - Slower than eq? and eqv?\n")
  (display "  - Example: (equal? '(1 (2 3)) '(1 (2 3))) => #t\n"))

;; Define a function to demonstrate practical use cases
(define (demonstrate-practical-uses)
  (display "\n=== Practical Use Cases ===\n")
  
  ;; Using eq? for symbol comparison in a switch-like construct
  (define (symbol-case sym)
    (cond
      ((eq? sym 'add) "Adding")
      ((eq? sym 'subtract) "Subtracting")
      ((eq? sym 'multiply) "Multiplying")
      ((eq? sym 'divide) "Dividing")
      (else "Unknown operation")))
  
  (display "symbol-case 'add: ")
  (display (symbol-case 'add))
  (newline)
  
  ;; Using eqv? for number comparison
  (define (is-answer? num)
    (eqv? num 42))
  
  (display "is-answer? 42: ")
  (display (is-answer? 42))
  (newline)
  
  ;; Using equal? for data structure comparison
  (define (find-config config-list target-config)
    (cond
      ((null? config-list) #f)
      ((equal? (car config-list) target-config) #t)
      (else (find-config (cdr config-list) target-config))))
  
  (define configs '((width 800 height 600) (width 1024 height 768) (width 1920 height 1080)))
  
  (display "find-config for 1080p: ")
  (display (find-config configs '(width 1920 height 1080)))
  (newline))

;; Main function
(define (main)
  (explain-equality-usage)
  (demonstrate-practical-uses)
  
  (display "\nEquality predicates are fundamental for comparing values in Scheme.\n")
  (display "Understanding the differences between eq?, eqv?, and equal? is crucial\n")
  (display "for writing correct and efficient code.\n"))

(main)
