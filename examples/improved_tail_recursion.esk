;; Advanced Tail Recursion Example
;;
;; This example demonstrates advanced tail recursion with closures
;; and mutual recursion.
;;

;; Simple tail-recursive factorial
(define (factorial n)
  (factorial-helper n 1))

(define (factorial-helper n acc)
  (if (<= n 1)
      acc
      (factorial-helper (- n 1) (* n acc))))

;; Mutual recursion with tail calls
(define (is-even? n)
  (if (= n 0)
      #t
      (is-odd? (- n 1))))

(define (is-odd? n)
  (if (= n 0)
      #f
      (is-even? (- n 1))))

;; Closure with tail recursion
(define (make-counter start)
  (lambda (increment)
    (set! start (+ start increment))
    start))

;; Higher-order function with tail recursion
(define (repeat f n x)
  (if (<= n 0)
      x
      (repeat f (- n 1) (f x))))

;; Test the functions
(display "Testing factorial(5): ")
(display (factorial 5))
(newline)

(display "Testing is-even?(10): ")
(display (is-even? 10))
(newline)

(display "Testing is-odd?(10): ")
(display (is-odd? 10))
(newline)

;; Test with smaller values to avoid stack overflow
(display "Testing factorial(10): ")
(display (factorial 10))
(newline)

(display "Testing is-even?(100): ")
(display (is-even? 100))
(newline)

;; Test counter
(define counter (make-counter 0))
(display "Counter(5): ")
(display (counter 5))
(newline)
(display "Counter(10): ")
(display (counter 10))
(newline)

;; Test repeat
(display "Repeat add1 5 times on 0: ")
(define add1 (lambda (x) (+ x 1)))
(display (repeat add1 5 0))
(newline)

;; End of example
