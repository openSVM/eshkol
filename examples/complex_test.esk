;; Complex test for closures, function composition, and mutual recursion
;; This test combines multiple advanced features to ensure they work together correctly

;; Define some simple functions
(define (square x)
  (* x x))

(define (double x)
  (+ x x))

;; Define a function composition function
(define (compose f g)
  (lambda (x)
    (f (g x))))

;; Create composed functions
(define square-then-double (compose double square))
(define double-then-square (compose square double))

;; Define mutually recursive functions for even/odd
(define (is-even? n)
  (if (= n 0)
      #t
      (is-odd? (- n 1))))

(define (is-odd? n)
  (if (= n 0)
      #f
      (is-even? (- n 1))))

;; Define a higher-order function that uses both composition and recursion
(define (repeat f n)
  (if (= n 1)
      f
      (compose f (repeat f (- n 1)))))

;; Define a function that uses a closure with multiple levels of nesting
(define (make-counter start)
  (let ((count start))
    (lambda ()
      (let ((current count))
        (set! count (+ count 1))
        current))))

;; Main function
(define (main)
  (let ((x 3)
        (counter1 (make-counter 1))
        (counter2 (make-counter 10)))
    
    ;; Test function composition
    (printf "x = %d\n" x)
    (printf "square(x) = %d\n" (square x))
    (printf "double(x) = %d\n" (double x))
    (printf "square-then-double(x) = %d\n" (square-then-double x))
    (printf "double-then-square(x) = %d\n" (double-then-square x))
    
    ;; Test mutual recursion
    (printf "is-even?(10) = %s\n" (if (is-even? 10) "true" "false"))
    (printf "is-odd?(10) = %s\n" (if (is-odd? 10) "true" "false"))
    
    ;; Test higher-order function with composition and recursion
    (let ((double-twice (repeat double 2))
          (square-twice (repeat square 2)))
      (printf "double-twice(3) = %d\n" (double-twice 3))
      (printf "square-twice(3) = %d\n" (square-twice 3)))
    
    ;; Test closures with state
    (printf "counter1() = %d\n" (counter1))
    (printf "counter1() = %d\n" (counter1))
    (printf "counter2() = %d\n" (counter2))
    (printf "counter2() = %d\n" (counter2))
    (printf "counter1() = %d\n" (counter1)))
  
  0)  ; Return 0 to indicate success
