;;
;; Lambda and Closure Test Example
;;
;; This example demonstrates advanced lambda and closure features
;; including higher-order functions, function composition, and mutual recursion.
;;

;; Higher-order function that applies a function twice
(define (apply-twice f x)
  (f (f x)))

;; Function composition
(define (compose f g)
  (lambda (x) (f (g x))))

;; Some simple functions to use with higher-order functions
(define (square x) (* x x))
(define (add1 x) (+ x 1))

;; Create composed functions
(define square-then-add1 (compose add1 square))
(define add1-then-square (compose square add1))

;; Mutual recursion with closures
(define (is-even? n)
  (if (= n 0)
      #t
      (is-odd? (- n 1))))

(define (is-odd? n)
  (if (= n 0)
      #f
      (is-even? (- n 1))))

;; Closure that captures a local variable
(define (make-adder n)
  (lambda (x) (+ x n)))

(define add5 (make-adder 5))

;; Test higher-order functions
(display "Testing higher-order functions:\n")
(display "Square of 4: ")
(display (square 4))
(newline)
(display "Apply square twice to 3: ")
(display (apply-twice square 3))
(newline)

;; Test function composition
(display "\nTesting function composition:\n")
(display "Square then add1 of 4: ")
(display (square-then-add1 4))
(newline)
(display "Add1 then square of 4: ")
(display (add1-then-square 4))
(newline)

;; Test mutual recursion
(display "\nTesting mutual recursion:\n")
(display "Is 10 even? ")
(display (is-even? 10))
(newline)
(display "Is 7 odd? ")
(display (is-odd? 7))
(newline)

;; Test closures
(display "\nTesting closures:\n")
(display "add5(10): ")
(display (add5 10))
(newline)

;; End of example
