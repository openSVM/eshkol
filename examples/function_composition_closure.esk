;;
;; Function Composition with Closures Example
;;
;; This example demonstrates function composition with closures.
;;

;; Define a function composition operator
(define (compose f g)
  (lambda (x) (f (g x))))

;; Define some simple functions
(define (square x) (* x x))
(define (add1 x) (+ x 1))
(define (double x) (* x 2))

;; Create composed functions
(define square-then-add1 (compose add1 square))
(define add1-then-square (compose square add1))
(define double-then-square (compose square double))
(define square-then-double (compose double square))

;; Create a triple composition
(define add1-then-square-then-double (compose double (compose square add1)))

;; Test the composed functions
(display "Testing function composition:\n")
(display "square-then-add1(4): ")
(display (square-then-add1 4))
(newline)
(display "add1-then-square(4): ")
(display (add1-then-square 4))
(newline)
(display "double-then-square(4): ")
(display (double-then-square 4))
(newline)
(display "square-then-double(4): ")
(display (square-then-double 4))
(newline)
(display "add1-then-square-then-double(4): ")
(display (add1-then-square-then-double 4))
(newline)

;; Create a function that returns a composed function
(define (make-processor step1 step2)
  (lambda (x)
    ((compose step2 step1) x)))

;; Test the function factory
(display "\nTesting function factory:\n")
(define processor (make-processor square add1))
(display "processor(4): ")
(display (processor 4))
(newline)

;; End of example
