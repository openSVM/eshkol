;; Function Composition in Eshkol
;; This example demonstrates higher-order functions and function composition

;; Define some simple functions
(define (square x)
  (* x x))

(define (double x)
  (+ x x))

;; Define a function composition function
(define (compose f g)
  (lambda (x)
    (f (g x))))

;; Create composed functions
(define square-then-double (compose double square))
(define double-then-square (compose square double))

;; Main function
(define (main)
  (let ([x 3])
    (printf "x = %d\n" x)
    (printf "square(x) = %d\n" (square x))
    (printf "double(x) = %d\n" (double x))
    (printf "square-then-double(x) = %d\n" (square-then-double x))
    (printf "double-then-square(x) = %d\n" (double-then-square x)))
  0)  ; Return 0 to indicate success
