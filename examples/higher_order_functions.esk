;;
;; Higher-Order Functions Implementation
;;
;; This file implements the fundamental higher-order functions:
;; - map: Apply a function to each element of a list
;; - filter: Select elements from a list that satisfy a predicate
;; - reduce: Combine elements of a list using a binary function
;;

;; Define some simple functions for testing
(define (square x) (* x x))
(define (add1 x) (+ x 1))
(define (even? x) (= (remainder x 2) 0))
(define (odd? x) (not (even? x)))

;; Part 1: Map Implementation
;; -------------------------

;; Apply a function to each element of a list, returning a new list
(define (map f lst)
  (if (null? lst)
      '()
      (cons (f (car lst)) (map f (cdr lst)))))

;; Test map function
(display "Testing map function:\n")
(display "map square '(1 2 3 4 5) = ")
(display (map square '(1 2 3 4 5)))  ; => (1 4 9 16 25)
(newline)

(display "map add1 '(1 2 3 4 5) = ")
(display (map add1 '(1 2 3 4 5)))  ; => (2 3 4 5 6)
(newline)

;; Part 2: Filter Implementation
;; ----------------------------

;; Select elements from a list that satisfy a predicate
(define (filter pred lst)
  (cond ((null? lst) '())
        ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))
        (else (filter pred (cdr lst)))))

;; Test filter function
(display "\nTesting filter function:\n")
(display "filter even? '(1 2 3 4 5 6) = ")
(display (filter even? '(1 2 3 4 5 6)))  ; => (2 4 6)
(newline)

(display "filter odd? '(1 2 3 4 5 6) = ")
(display (filter odd? '(1 2 3 4 5 6)))  ; => (1 3 5)
(newline)

;; Part 3: Reduce Implementation
;; ----------------------------

;; Combine elements of a list using a binary function
;; The initial value is optional; if not provided, the first element is used
(define (reduce f lst . initial)
  (cond ((null? lst) (if (null? initial) 
                         (error "reduce: empty list with no initial value")
                         (car initial)))
        ((null? initial) (reduce f (cdr lst) (car lst)))
        (else (reduce f (cdr lst) (f (car initial) (car lst))))))

;; Test reduce function
(display "\nTesting reduce function:\n")
(display "reduce + '(1 2 3 4 5) = ")
(display (reduce + '(1 2 3 4 5)))  ; => 15
(newline)

(display "reduce * '(1 2 3 4 5) = ")
(display (reduce * '(1 2 3 4 5)))  ; => 120
(newline)

(display "reduce + '(1 2 3 4 5) 10 = ")
(display (reduce + '(1 2 3 4 5) 10))  ; => 25
(newline)

;; Part 4: Combining Higher-Order Functions
;; ---------------------------------------

;; Example: Sum of squares of even numbers
(display "\nCombining higher-order functions:\n")
(display "Sum of squares of even numbers in '(1 2 3 4 5 6 7 8 9 10): ")
(display (reduce + (map square (filter even? '(1 2 3 4 5 6 7 8 9 10)))))  ; => 220
(newline)

;; Example: Product of incremented odd numbers
(display "Product of incremented odd numbers in '(1 2 3 4 5): ")
(display (reduce * (map add1 (filter odd? '(1 2 3 4 5)))))  ; => 48 (2*4*6)
(newline)

;; Part 5: Implementing Function Composition with Higher-Order Functions
;; -------------------------------------------------------------------

;; Define a function composition operator using reduce
(define (compose-with-reduce . fns)
  (lambda (x)
    (reduce (lambda (result f) (f result))
            (reverse fns)
            x)))

;; Test compose-with-reduce
(display "\nTesting function composition with reduce:\n")
(define f1 (compose-with-reduce square add1 double))
(display "f1(5) = ")
(display (f1 5))  ; => 121 (square(add1(double(5))) = square(add1(10)) = square(11) = 121)
(newline)

;; End of example
