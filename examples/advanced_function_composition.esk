;;
;; Advanced Function Composition Framework
;;
;; This example demonstrates a comprehensive framework for function composition
;; that leverages Eshkol's closure and lexical scoping capabilities.
;;

;; Define some simple functions for testing
(define (square x) (* x x))
(define (add1 x) (+ x 1))
(define (double x) (* x 2))
(define (negate x) (- x))

;; Part 1: Binary Function Composition
;; -----------------------------------

;; Define a binary function composition operator
(define (compose f g)
  (lambda (x) (f (g x))))

;; Test binary composition
(display "Testing binary composition:\n")
(define square-then-add1 (compose add1 square))
(display "square-then-add1(5) = ")
(display (square-then-add1 5))  ; add1(square(5)) = add1(25) = 26
(newline)

;; Part 2: N-ary Function Composition
;; ----------------------------------

;; Define a function that applies a sequence of functions to a value
(define (apply-functions fs x)
  (if (null? fs)
      x
      (apply-functions (cdr fs) ((car fs) x))))

;; Define a function that composes multiple functions into a single function
;; The functions are applied in reverse order (from right to left)
(define (compose-n . fns)
  (lambda (x)
    (apply-functions (reverse fns) x)))

;; Test n-ary composition
(display "\nTesting n-ary composition:\n")
(define f1 (compose-n square add1 double))
(display "f1(5) = ")
(display (f1 5))  ; square(add1(double(5))) = square(add1(10)) = square(11) = 121
(newline)

;; Part 3: Array-based Function Composition
;; ----------------------------------------

;; Define a function that applies a sequence of functions in an array to a value
(define (eval-array fs size x)
  (let loop ((i 0) (result x))
    (if (= i size)
        result
        (loop (+ i 1) ((vector-ref fs i) result)))))

;; Create a function array
(define fs (vector square add1 double))

;; Test the eval-array function
(display "\nTesting array-based composition:\n")
(display "eval-array(fs, 3, 5) = ")
(display (eval-array fs 3 5))  ; double(add1(square(5))) = double(add1(25)) = double(26) = 52
(newline)

;; Part 4: Closure-based Function Composition
;; ------------------------------------------

;; Define a function that creates a closure structure to hold a function array
;; This is similar to the 'compose' function in the C example
(define (make-function-array . fns)
  (let ((size (length fns))
        (fs (list->vector fns)))
    (lambda (x)
      (eval-array fs size x))))

;; Test closure-based composition
(display "\nTesting closure-based composition:\n")
(define composed-function (make-function-array square add1 double))
(display "composed-function(5) = ")
(display (composed-function 5))  ; double(add1(square(5))) = double(add1(25)) = double(26) = 52
(newline)

;; Part 5: Dynamic Function Composition
;; -----------------------------------

;; Define a function that creates a mutable function array
(define (make-mutable-function-array . fns)
  (let ((fs (list->vector fns)))
    (lambda (op . args)
      (case op
        ((apply) (eval-array fs (vector-length fs) (car args)))
        ((get) (vector-ref fs (car args)))
        ((set!) (vector-set! fs (car args) (cadr args)))
        ((size) (vector-length fs))
        (else (error "Unknown operation" op))))))

;; Test dynamic function composition
(display "\nTesting dynamic function composition:\n")
(define dynamic-composer (make-mutable-function-array square add1 double))
(display "dynamic-composer(apply, 5) = ")
(display (dynamic-composer 'apply 5))  ; double(add1(square(5))) = double(add1(25)) = double(26) = 52
(newline)

;; Modify the function array
(dynamic-composer 'set! 0 double)
(dynamic-composer 'set! 2 square)
(display "After reordering: dynamic-composer(apply, 5) = ")
(display (dynamic-composer 'apply 5))  ; square(add1(double(5))) = square(add1(10)) = square(11) = 121
(newline)

;; Part 6: Function Pipeline
;; ------------------------

;; Define a function that creates a pipeline of functions
;; The functions are applied in the order they appear (from left to right)
(define (pipeline . fns)
  (lambda (x)
    (fold (lambda (f acc) (f acc)) x fns)))

;; Test function pipeline
(display "\nTesting function pipeline:\n")
(define pipe (pipeline double add1 square))
(display "pipe(5) = ")
(display (pipe 5))  ; square(add1(double(5))) = square(add1(10)) = square(11) = 121
(newline)

;; Part 7: Function Composition with Type Checking
;; ----------------------------------------------

;; Define a function that creates a typed function
(define (typed-function f input-type output-type)
  (lambda (x)
    (if (input-type x)
        (let ((result (f x)))
          (if (output-type result)
              result
              (error "Type error: output is not of expected type")))
        (error "Type error: input is not of expected type"))))

;; Define some type predicates
(define (number? x) (or (integer? x) (real? x)))
(define (positive? x) (> x 0))
(define (positive-number? x) (and (number? x) (positive? x)))

;; Create typed functions
(define typed-square 
  (typed-function square positive-number? positive-number?))
(define typed-add1 
  (typed-function add1 number? number?))
(define typed-double 
  (typed-function double number? number?))

;; Define a function that composes typed functions
(define (compose-typed f g)
  (lambda (x)
    (f (g x))))

;; Test typed function composition
(display "\nTesting typed function composition:\n")
(define typed-composed (compose-typed typed-add1 typed-square))
(display "typed-composed(5) = ")
(display (typed-composed 5))  ; typed-add1(typed-square(5)) = typed-add1(25) = 26
(newline)

;; Part 8: Partial Application and Composition
;; ------------------------------------------

;; Define a function that creates a partially applied function
(define (partial f . args)
  (lambda xs
    (apply f (append args xs))))

;; Define a function that takes multiple arguments
(define (add x y) (+ x y))
(define (multiply x y) (* x y))

;; Create partially applied functions
(define add5 (partial add 5))
(define multiply3 (partial multiply 3))

;; Test partial application with composition
(display "\nTesting partial application with composition:\n")
(define add5-then-multiply3 (compose multiply3 add5))
(display "add5-then-multiply3(10) = ")
(display (add5-then-multiply3 10))  ; multiply3(add5(10)) = multiply3(15) = 45
(newline)

;; End of example
